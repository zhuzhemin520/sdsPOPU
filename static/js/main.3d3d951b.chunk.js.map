{"version":3,"sources":["../node_modules/@stencil/core/internal/client lazy /^/.*$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/dynamicChart.tsx","components/pieChart.tsx","config.ts","components/map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","DynamicChart","props","ref","myChart","state","data","time","yAxisDatas","this","echarts","setOption","nextProps","nextContext","setState","option","title","subtext","name","left","xAxis","max","axisLabel","fontSize","yAxis","type","inverse","animationDuration","animationDurationUpdate","grid","top","right","bottom","series","realtimeSort","label","show","position","valueAnimation","itemStyle","color","legend","animationEasing","animationEasingUpdate","style","width","height","React","Component","PieChart","tooltip","trigger","textStyle","itemWidth","itemHeight","radius","ConfigExt","dataUrl","config","Object","assign","Map","populayer","sketchViewModel","sceneLayerView","sketchLayer","GraphicsLayer","bufferLayer","queryDiv","sketchGeometry","highlightHandle","scale","lnglat","created","bufferSize","popuDatas","densityDatas","getTime","loading","piePopuDatas","visible","dataSource","init","Date","esriConfig","apiKey","labelClass","LabelClass","symbol","symbolLayers","material","size","labelPlacement","labelExpressionInfo","expression","GeoJSONLayer","url","renderer","visualVariables","field","legendOptions","stops","value","labelingInfo","elevationInfo","mode","popupTemplate","content","fieldInfos","fieldName","outFields","map","EsriMap","basemap","ground","layers","view","SceneView","container","camera","spatialReference","wkid","x","y","z","heading","tilt","self","when","setTimeout","addLisener","popuLayer","getScale","on","evt","stopPropagation","hitTest","respond","results","result","lng","mapPoint","longitude","toFixed","lat","latitude","Legend","layerInfos","layer","ui","add","createBuffer","_scale","query","createQuery","where","queryFeatures","getChartDatas","console","error","highlightBuildings","objectIds","clearHighlighting","objectIdField","log","highlight","updateSceneLayer","geometry","distance","getBufferSize","queryObjectIds","addMany","whenLayerView","layerView","document","getElementById","display","queryAllFeatures","SketchViewModel","defaultUpdateOptions","tool","toggleToolOnClick","defaultCreateOptions","hasZ","event","graphic","runQuery","graphics","debouncedRunQuery","promiseUtils","buffer","bufferGeometry","geometryEngine","length","Graphic","polygonSymbol","getItemAt","removeAll","updateBufferGraphic","queryStatistics","catch","remove","geometryType","clearGeometry","create","showUi","cancel","clearCharts","features","tempPopuDatas","tempDensityDatas","tempPopuCalcDatas","popuObj","forEach","feature","attributes","DENSITY","POPU","NAME","push","Number","i","sort","a","b","count","datas","names","popuData","getDatas","densityData","className","paddingLeft","padding","marginLeft","onClick","geometryButtonsClickHandler","bind","min","onChange","onSliderChange","justify","danger","clearHandler","bodyStyle","align","onView","spinning","tip","toString","centered","footer","open","onCancel","onClose","pagination","scroll","columns","dataIndex","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d3d951b.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1044;","import * as  echarts from \"echarts\"\r\nimport React from \"react\"\r\nexport interface DynamicChartProps {\r\n    color?: string\r\n    name?: string\r\n    time?: string\r\n    data?: any\r\n    yAxisDatas?: string[]\r\n}\r\n\r\nexport interface DynamicChartState {\r\n    data: any\r\n    time?: string\r\n    yAxisDatas?: string[]\r\n}\r\nexport class DynamicChart extends React.Component<DynamicChartProps, DynamicChartState> {\r\n    ref: any\r\n    myChart: any\r\n    constructor(props: DynamicChartProps) {\r\n        super(props)\r\n        this.state = {\r\n            data: props.data,\r\n            time: props.time,\r\n            yAxisDatas: props.yAxisDatas\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.ref) {\r\n            this.myChart = echarts.init(this.ref)\r\n            this.setOption()\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Readonly<DynamicChartProps>, nextContext: any): void {\r\n        const { data, time, yAxisDatas } = nextProps\r\n        if (time !== this.props.time) {\r\n            this.setState({\r\n                data,\r\n                time,\r\n                yAxisDatas\r\n            }, () => {\r\n                this.setOption()\r\n            })\r\n        }\r\n    }\r\n\r\n    setOption() {\r\n        const { yAxisDatas, data } = this.state\r\n        const option: any = {\r\n            title: {\r\n                subtext: this.props.name,\r\n                left: 'center'\r\n            },\r\n            xAxis: {\r\n                max: 'dataMax',\r\n                axisLabel: {\r\n                    fontSize: 8\r\n                }\r\n            },\r\n            yAxis: {\r\n                type: 'category',\r\n                data: yAxisDatas,\r\n                inverse: true,\r\n                animationDuration: 100,\r\n                animationDurationUpdate: 100,\r\n                axisLabel: {\r\n                    fontSize: 8\r\n                }\r\n                // max: 2 // only the largest 3 bars will be displayed\r\n            },\r\n            grid: {\r\n                left: 50,\r\n                top: 30,\r\n                right: 70,\r\n                bottom: 30\r\n            },\r\n            series: [\r\n                {\r\n                    realtimeSort: true,\r\n                    name: this.props.name,\r\n                    type: 'bar',\r\n                    data: data,\r\n                    label: {\r\n                        show: true,\r\n                        position: 'right',\r\n                        valueAnimation: true,\r\n                        fontSize: 8\r\n                    },\r\n                    itemStyle: {\r\n                        color: this.props.color,\r\n                    }\r\n                }\r\n            ],\r\n            legend: {\r\n                show: false,\r\n            },\r\n            animationDuration: 0,\r\n            animationDurationUpdate: 100,\r\n            animationEasing: 'linear',\r\n            animationEasingUpdate: 'linear',\r\n            // graphic: {\r\n            //     elements: [\r\n            //         {\r\n            //             type: 'text',\r\n            //             right: 0,\r\n            //             bottom: 0,\r\n            //             style: {\r\n            //                 text: \"111\",\r\n            //                 font: 'bolder 80px monospace',\r\n            //                 fill: 'rgba(100, 100, 100, 0.25)'\r\n            //             },\r\n            //             z: 100\r\n            //         }\r\n            //     ]\r\n            // }\r\n        };\r\n\r\n        this.myChart.setOption(option)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return <div ref={(ref) => this.ref = ref} style={{ width: \"100%\", height: \"100%\" }\r\n        }></div >\r\n    }\r\n}","import * as  echarts from \"echarts\"\r\nimport React from \"react\"\r\nexport interface PieChartProps {\r\n    color?: string\r\n    name?: string\r\n    time?: string\r\n    data?: ChartData[]\r\n}\r\n\r\nexport interface ChartData {\r\n    name: string\r\n    value: number\r\n}\r\n\r\nexport interface PieChartState {\r\n    data?: ChartData[]\r\n    time?: string\r\n    yAxisDatas?: string[]\r\n}\r\n/**\r\n * 饼图\r\n */\r\nexport class PieChart extends React.Component<PieChartProps, PieChartState> {\r\n    ref: any\r\n    myChart: any\r\n    constructor(props: PieChartProps) {\r\n        super(props)\r\n        this.state = {\r\n            data: props.data,\r\n            time: props.time,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.ref) {\r\n            this.myChart = echarts.init(this.ref)\r\n            this.setOption()\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Readonly<PieChartProps>, nextContext: any): void {\r\n        const { data, time } = nextProps\r\n        if (time !== this.props.time) {\r\n            this.setState({\r\n                data,\r\n                time,\r\n            }, () => {\r\n                this.setOption()\r\n            })\r\n        }\r\n    }\r\n\r\n    setOption() {\r\n        const { data } = this.state\r\n        const option: any = {\r\n            title: {\r\n                subtext: this.props.name,\r\n                left: 'center'\r\n            },\r\n            tooltip: {\r\n                trigger: 'item',\r\n            },\r\n            legend: {\r\n                // orient: 'vertical',\r\n                // left: 'left',\r\n                // top:\"bottom\",\r\n                bottom: 0,\r\n                left: 'center',\r\n                textStyle:{\r\n                    fontSize:10\r\n                },\r\n                itemWidth:16,\r\n                itemHeight:12\r\n            },\r\n            grid: {\r\n                left: 140,\r\n                top: 40,\r\n                right: 0,\r\n                bottom: 0\r\n            },\r\n            series: [\r\n                {\r\n                    name: this.props.name,\r\n                    type: 'pie',\r\n                    radius: '60%',\r\n                    data,\r\n                    label: {\r\n                        show: false,\r\n                        position: 'center'\r\n                      },\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.myChart.setOption(option)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return <div ref={(ref) => this.ref = ref} style={{ width: \"100%\", height: \"100%\" }\r\n        }></div >\r\n    }\r\n}","export const ConfigExt = {\r\n    dataUrl: \"/datas/shandongpopu.geojson\",\r\n}\r\n\r\nif (config) {\r\n    Object.assign(ConfigExt, config)\r\n}\r\n","import \"./map.css\"\r\nimport EsriMap from \"@arcgis/core/Map\";\r\nimport SceneView from \"@arcgis/core/views/SceneView\"\r\nimport Graphic from \"@arcgis/core/Graphic\"\r\nimport GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\"\r\nimport LabelClass from \"@arcgis/core/layers/support/LabelClass\"\r\nimport GeoJSONLayer from \"@arcgis/core/layers/GeoJSONLayer\"\r\nimport esriConfig from \"@arcgis/core/config\"\r\nimport Legend from \"@arcgis/core/widgets/Legend\"\r\nimport React from \"react\";\r\nimport { Button, Card, Col, Modal, Row, Slider, Spin, Table, Typography } from \"antd\";\r\nimport SketchViewModel from \"@arcgis/core/widgets/Sketch/SketchViewModel\"\r\nimport * as promiseUtils from \"@arcgis/core/core/promiseUtils\";\r\nimport * as geometryEngine from \"@arcgis/core/geometry/geometryEngine\"\r\nimport { DynamicChart } from \"./dynamicChart\";\r\nimport { ChartData, PieChart } from \"./pieChart\";\r\nimport { ConfigExt } from \"../config\";\r\n\r\nexport interface MapProps {\r\n\r\n}\r\nexport interface MapState {\r\n    /**比例尺 */\r\n    scale?: string\r\n    /**\r\n     * 经纬度\r\n     */\r\n    lnglat?: {\r\n        lng?: string\r\n        lat?: string\r\n    }\r\n    created?: boolean\r\n    bufferSize?: number\r\n    /**人口 */\r\n    popuDatas?: ChartData[]\r\n    /**密度 */\r\n    densityDatas?: ChartData[]\r\n    time?: number\r\n    loading?: boolean\r\n    //人口饼图数据\r\n    piePopuDatas?: ChartData[]\r\n    visible?: boolean\r\n    dataSource?: DataSource[]\r\n}\r\n\r\nexport interface DataSource {\r\n    POPU?: number\r\n    NAME?: string\r\n    DENSITY?: number\r\n    feature?: any\r\n}\r\nexport class Map extends React.Component<MapProps, MapState>{\r\n    populayer: any\r\n    sketchViewModel: any\r\n    sceneLayerView: any = null;\r\n    sketchLayer = new GraphicsLayer();\r\n    bufferLayer: any = new GraphicsLayer();\r\n    queryDiv: any\r\n    sketchGeometry: any = null;\r\n    highlightHandle: any = null;\r\n\r\n    constructor(props: MapProps) {\r\n        super(props)\r\n        this.state = {\r\n            scale: \"\",\r\n            lnglat: {},\r\n            created: false,\r\n            bufferSize: 0,\r\n            popuDatas: [],\r\n            densityDatas: [],\r\n            time: this.getTime(),\r\n            loading: true,\r\n            piePopuDatas: [],\r\n            visible: false,\r\n            dataSource: []\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        this.init()\r\n    }\r\n\r\n\r\n    getTime() {\r\n        return new Date().getTime()\r\n    }\r\n\r\n\r\n    init() {\r\n        esriConfig.apiKey = \"AAPK449340f85b664e6b802d2d0e65eb4849vlSII8YqKpEj5Fn0hCy2qr4QyOAZRZSB6XWDc2-X8pFlNoRYoQoetUvFs1Y_JVKL\"\r\n\r\n        //渲染图层的方法\r\n        const renderer: any = {\r\n            type: \"simple\", // autocasts as new SimpleRenderer()\r\n            symbol: {\r\n                type: \"polygon-3d\", // autocasts as new PolygonSymbol3D()\r\n                symbolLayers: [\r\n                    {\r\n                        type: \"extrude\" // autocasts as new ExtrudeSymbol3DLayer()\r\n                    }\r\n                ]\r\n            },\r\n            visualVariables: [\r\n                {\r\n                    type: \"size\",\r\n                    field: \"POPU\",\r\n                    legendOptions: {\r\n                        title: \"人口（万人）\"\r\n                    },\r\n                    stops: [\r\n                        {\r\n                            value: 1,\r\n                            size: 100,\r\n                        },\r\n                        {\r\n                            value: 300,\r\n                            size: 30000,\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"color\",\r\n                    field: \"DENSITY\",\r\n                    legendOptions: {\r\n                        title: \"人口密度（人/km²）\"\r\n                    },\r\n                    stops: [\r\n                        {\r\n                            value: 100,\r\n                            color: \"#70b6ba\",\r\n                            label: '100',\r\n                        },\r\n                        {\r\n                            value: 500,\r\n                            color: \"#b7d5d7\",\r\n                            label: '500',\r\n                        },\r\n                        {\r\n                            value: 1000,\r\n                            color: \"#fff0d0\",\r\n                            label: '1000',\r\n                        },\r\n                        {\r\n                            value: 3000,\r\n                            color: \"#f9cbb3\",\r\n                            label: '3000',\r\n                        },\r\n                        {\r\n                            value: 16000,\r\n                            color: \"#ec8787\",\r\n                            label: '16000',\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        };\r\n\r\n        //图层标注\r\n        const labelClass = new LabelClass({\r\n            symbol: {\r\n                type: \"label-3d\",\r\n                symbolLayers: [\r\n                    {\r\n                        type: \"text\",\r\n                        material: {\r\n                            color: \"black\"\r\n                        },\r\n                        size: 8\r\n                    } as any\r\n                ]\r\n            },\r\n            labelPlacement: \"above-center\",\r\n            labelExpressionInfo: {\r\n                expression: 'DefaultValue($feature.NAME, \"no data\")'\r\n            }\r\n        });\r\n\r\n        // 人口图层，以geojson图层加载\r\n        this.populayer = new GeoJSONLayer({\r\n            id: \"人口\",\r\n            url: ConfigExt.dataUrl,//数据路径\r\n            renderer: renderer,\r\n            labelingInfo: [labelClass],\r\n            elevationInfo: {\r\n                mode: \"on-the-ground\"\r\n            },\r\n            popupTemplate: {\r\n                title: \"{name}\",\r\n                content: [{\r\n                    type: \"fields\",\r\n                    fieldInfos: [{\r\n                        fieldName: \"ENAME\",\r\n                        label: \"行政区英文名称\"\r\n                    }, {\r\n                        fieldName: \"POPU\",\r\n                        label: \"人口（万人）\"\r\n                    }, {\r\n                        fieldName: \"AREA\",\r\n                        label: \"行政区面积(m²)\"\r\n                    }, {\r\n                        fieldName: \"DENSITY\",\r\n                        label: \"人口密度（人/km²）\"\r\n                    }]\r\n                }]\r\n            },\r\n            outFields: [\"objectid\", \"code\", \"name\", \"type\", \"length\", \"yearcomple\", \"catagory\"]\r\n        });\r\n\r\n\r\n        const map = new EsriMap({\r\n            basemap: \"arcgis-topographic\", //基础地图服务   可以选择\"\"dark-gray\r\n            ground: \"world-elevation\", //高程服务\r\n            layers: [this.populayer],\r\n        });\r\n\r\n        const view = new SceneView({\r\n            container: \"map\",\r\n            map: map,\r\n            camera: {\r\n                position: {\r\n                    spatialReference: { wkid: 102100 },\r\n                    x: 12964061.149533136,\r\n                    y: 3447251.4087446583,\r\n                    z: 819505.7301032562\r\n                },\r\n                heading: 9.384510690778026,\r\n                tilt: 40.21595521917268\r\n            }\r\n        });\r\n\r\n\r\n        //比例尺  经纬度相关\r\n        const self = this\r\n        view.when(function () {\r\n            //延迟2s加载\r\n            self.setState({\r\n                created: true\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    //添加一些监听\r\n                    self.addLisener(view, self, self.populayer)\r\n                }, 50);\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    addLisener(view: any, self: any, popuLayer: any) {\r\n        self.getScale(view)\r\n        //点击地图的监听事件\r\n        view.on(\"click\", function (e: any) {\r\n            //获取初始化视角\r\n            // let activeViewpoint = view.viewpoint.clone();\r\n            // console.log(activeViewpoint);\r\n            //转换当前点击的坐标为地理坐标\r\n            // const geom = webMercatorUtils.xyToLngLat(e.mapPoint.x, e.mapPoint.y);\r\n            // console.log(geom[0], geom[1], e.mapPoint.x, e.mapPoint.y);\r\n        });\r\n\r\n        //双击事件\r\n        view.on('double-click', function (evt: any) {\r\n            evt.stopPropagation();\r\n        });\r\n\r\n        //滚轮事件\r\n        view.on('mouse-wheel', function () {\r\n            //鼠标滚轮缩放\r\n            self.getScale(view)\r\n        });\r\n\r\n        //鼠标移动\r\n        view.on(\"pointer-move\", function (evt: any) { //鼠标移动事件\r\n            view.hitTest(evt).then(function (respond: any) {\r\n                if (respond?.results[0]) {\r\n                    const result = respond.results[0];\r\n                    const lng = result.mapPoint.longitude.toFixed(4);\r\n                    const lat = result.mapPoint.latitude.toFixed(4);\r\n                    self.setState({\r\n                        lnglat: {\r\n                            lng,\r\n                            lat\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        });\r\n\r\n\r\n        //比例尺\r\n        const legend = new Legend({\r\n            container: \"legendDiv\",\r\n            view: view,\r\n            layerInfos: [\r\n                {\r\n                    layer: popuLayer,\r\n                    title: \"人口\"\r\n                }\r\n            ],\r\n        });\r\n\r\n        //图例\r\n        view.ui.add(legend, \"bottom-right\");\r\n\r\n        //查询面板\r\n        view.ui.add([\"queryDiv\"], \"top-right\");\r\n\r\n        //创建缓冲区\r\n        self.createBuffer(view, self)\r\n    }\r\n\r\n    getScale(view: SceneView) {\r\n        const scale = view.scale;\r\n        const _scale = scale.toFixed(0);\r\n        const self = this\r\n        self.setState({\r\n            scale: _scale\r\n        })\r\n    }\r\n\r\n    queryAllFeatures() {\r\n        //查询图层里面所有的要素，用于加载所有数据\r\n        const query = this.sceneLayerView.createQuery();\r\n        query.where = \"1=1\"\r\n        return this.sceneLayerView.queryFeatures(query).then((result: any) => {\r\n            this.getChartDatas(result)\r\n        }, console.error);\r\n    }\r\n\r\n\r\n    createBuffer(view: any, self: any) {\r\n        view.map.addMany([self.bufferLayer, self.sketchLayer]);\r\n        view.whenLayerView(self.populayer).then((layerView: any) => {\r\n            self.sceneLayerView = layerView;\r\n            self.queryDiv = document.getElementById(\"queryDiv\")\r\n            self.queryDiv.style.display = \"block\"\r\n            //查询所有的要素\r\n            setTimeout(() => {\r\n                self.populayer.when(() => {\r\n                    self.queryAllFeatures()\r\n                })\r\n            }, 3000);\r\n        });\r\n\r\n        // use SketchViewModel to draw polygons that are used as a query\r\n        self.sketchViewModel = new SketchViewModel({\r\n            layer: self.sketchLayer,\r\n            defaultUpdateOptions: {\r\n                tool: \"reshape\",\r\n                toggleToolOnClick: false\r\n            },\r\n            view: view,\r\n            defaultCreateOptions: { hasZ: false }\r\n        });\r\n\r\n        self.sketchViewModel.on(\"create\", (event: any) => {\r\n            if (event.state === \"complete\") {\r\n                self.sketchGeometry = event.graphic.geometry;\r\n                runQuery();\r\n            }\r\n        });\r\n\r\n        self.sketchViewModel.on(\"update\", (event: any) => {\r\n            if (event.state === \"complete\") {\r\n                self.sketchGeometry = event.graphics[0].geometry;\r\n                runQuery();\r\n            }\r\n        });\r\n\r\n        // Set the renderer with objectIds\r\n        function highlightBuildings(objectIds: string[]) {\r\n            // Remove any previous highlighting\r\n            self.clearHighlighting();\r\n            const objectIdField = self.populayer.objectIdField;\r\n            // document.getElementById(\"count\").innerHTML = objectIds.length;\r\n            console.log(objectIds);\r\n\r\n            self.highlightHandle = self.sceneLayerView.highlight(objectIds);\r\n        }\r\n\r\n\r\n        function updateSceneLayer() {\r\n            const query = self.sceneLayerView.createQuery();\r\n            query.geometry = self.sketchGeometry;\r\n            query.distance = getBufferSize();\r\n            return self.sceneLayerView.queryObjectIds(query).then(highlightBuildings);\r\n        }\r\n\r\n\r\n        function getBufferSize() {\r\n            return self.state.bufferSize ? self.state.bufferSize * 1000 : 0\r\n        }\r\n\r\n        // set the geometry query on the visible SceneLayerView\r\n        const debouncedRunQuery = promiseUtils.debounce(() => {\r\n            if (!self.sketchGeometry) {\r\n                return;\r\n            }\r\n\r\n            self.queryDiv.style.display = \"block\";\r\n            updateBufferGraphic(getBufferSize());\r\n            return promiseUtils.eachAlways([\r\n                queryStatistics(),\r\n                updateSceneLayer()\r\n            ]);\r\n        });\r\n\r\n        function runQuery() {\r\n            debouncedRunQuery().catch((error: any) => {\r\n                if (error.name === \"AbortError\") {\r\n                    return;\r\n                }\r\n\r\n                console.error(error);\r\n            });\r\n        }\r\n\r\n        function queryStatistics() {\r\n            const query = self.sceneLayerView.createQuery();\r\n            query.geometry = self.sketchGeometry;\r\n            query.distance = getBufferSize();\r\n            self.setState({\r\n                loading: true\r\n            })\r\n            return self.sceneLayerView.queryFeatures(query).then((result: any) => {\r\n                self.getChartDatas(result)\r\n            }, console.error);\r\n        }\r\n\r\n        // update the graphic with buffer\r\n        function updateBufferGraphic(buffer: any) {\r\n            // add a polygon graphic for the buffer\r\n            if (buffer > 0) {\r\n                const bufferGeometry = geometryEngine.geodesicBuffer(\r\n                    self.sketchGeometry,\r\n                    buffer,\r\n                    \"meters\"\r\n                );\r\n                if (self.bufferLayer.graphics.length === 0) {\r\n                    self.bufferLayer.add(\r\n                        new Graphic({\r\n                            geometry: bufferGeometry,\r\n                            symbol: self.sketchViewModel.polygonSymbol\r\n                        } as any)\r\n                    );\r\n                } else {\r\n                    self.bufferLayer.graphics.getItemAt(0).geometry = bufferGeometry;\r\n                }\r\n            } else {\r\n                self.bufferLayer.removeAll();\r\n            }\r\n        }\r\n    }\r\n\r\n    clearHighlighting() {\r\n        if (this.highlightHandle) {\r\n            this.highlightHandle.remove();\r\n            this.highlightHandle = null;\r\n        }\r\n    }\r\n\r\n    clearCharts() {\r\n        this.queryAllFeatures()\r\n    }\r\n\r\n    onSliderChange(value: number) {\r\n        this.setState({\r\n            bufferSize: value\r\n        })\r\n    }\r\n\r\n    geometryButtonsClickHandler(geometryType: string, event: any) {\r\n        this.clearGeometry();\r\n        this.sketchViewModel.create(geometryType);\r\n    }\r\n\r\n    clearGeometry(showUi?: boolean) {\r\n        this.sketchGeometry = null;\r\n        this.sketchViewModel.cancel();\r\n        this.sketchLayer.removeAll();\r\n        this.bufferLayer.removeAll();\r\n        this.clearHighlighting();\r\n        this.clearCharts();\r\n        if (!showUi) {\r\n            //清除UI\r\n            if (this.queryDiv)\r\n                this.queryDiv.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n\r\n    clearHandler() {\r\n        this.clearGeometry(true)\r\n    }\r\n\r\n\r\n    getChartDatas(queryFeatures: any) {\r\n        //构造echarts数据\r\n        if (queryFeatures?.features) {\r\n            const features = queryFeatures.features\r\n            const tempPopuDatas: ChartData[] = []\r\n            const tempDensityDatas: ChartData[] = []\r\n            const tempPopuCalcDatas: ChartData[] = []\r\n\r\n            const dataSource: DataSource[] = []\r\n\r\n            const popuObj: { [key: string]: number } = {\r\n                \"<40\": 0,\r\n                \"40-80\": 0,\r\n                \"80-160\": 0,\r\n                \">=160\": 0,\r\n            }\r\n\r\n            features.forEach((feature: any) => {\r\n                const { attributes } = feature\r\n                // DENSITY: 816 NAME: \"微山县\" POPU: 68\r\n                if (attributes) {\r\n                    const { DENSITY, POPU, NAME } = attributes\r\n                    tempPopuDatas.push({ value: POPU ? Number(POPU) : 0, name: NAME })\r\n                    tempDensityDatas.push({ value: DENSITY ? Number(DENSITY) : 0, name: NAME })\r\n                    dataSource.push({\r\n                        DENSITY,\r\n                        POPU,\r\n                        NAME,\r\n                        feature\r\n                    })\r\n                    //分级统计人口\r\n                    if (POPU < 40) {\r\n                        popuObj[\"<40\"]++\r\n                    } else if (POPU >= 40 && POPU < 80) {\r\n                        popuObj[\"40-80\"]++\r\n                    } else if (POPU >= 80 && POPU < 160) {\r\n                        popuObj[\"80-160\"]++\r\n                    } else if (POPU >= 160) {\r\n                        popuObj[\">=160\"]++\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (popuObj) {\r\n                for (let i in popuObj) {\r\n                    tempPopuCalcDatas.push({\r\n                        name: i,\r\n                        value: popuObj[i]\r\n                    })\r\n                }\r\n            }\r\n\r\n            tempPopuDatas.sort((a, b) => { return b.value - a.value })\r\n            tempDensityDatas.sort((a, b) => { return b.value - a.value })\r\n            dataSource.sort((a: any, b: any) => { return b.POPU - a.POPU })\r\n\r\n            this.setState({\r\n                popuDatas: tempPopuDatas,\r\n                densityDatas: tempDensityDatas,\r\n                time: this.getTime(),\r\n                loading: false,\r\n                piePopuDatas: tempPopuCalcDatas,\r\n                dataSource\r\n            })\r\n        }\r\n    }\r\n\r\n    getDatas(data: ChartData[], count?: number) {\r\n        const datas: number[] = []\r\n        const names: string[] = []\r\n        for (let i in data) {\r\n            if (count) {\r\n                if (Number(i) > count - 1) {\r\n                    break;\r\n                }\r\n            }\r\n            const { name, value } = data[i]\r\n            datas.push(value)\r\n            names.push(name)\r\n        }\r\n        return { datas, names }\r\n    }\r\n\r\n\r\n    onView() {\r\n        this.setState({\r\n            visible: true\r\n        })\r\n    }\r\n\r\n    onClose() {\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render(): React.ReactNode {\r\n        const { scale, lnglat, created, bufferSize, popuDatas, densityDatas, time, loading, piePopuDatas, visible, dataSource } = this.state\r\n        const width = 340\r\n        const count = 10\r\n        const height = 40\r\n        const popuData = popuDatas ? this.getDatas(popuDatas, count) : { datas: [], names: [] }\r\n        const densityData = densityDatas ? this.getDatas(densityDatas, count) : { datas: [], names: [] }\r\n        const columns = [\r\n            {\r\n                title: '名称',\r\n                dataIndex: 'NAME',\r\n                key: 'nAME',\r\n            },\r\n            {\r\n                title: '人口(万人)',\r\n                dataIndex: 'POPU',\r\n                key: 'POPU',\r\n            },\r\n            {\r\n                title: '人口密度(人/km²)',\r\n                dataIndex: 'DENSITY',\r\n                key: 'DENSITY',\r\n            },\r\n        ];\r\n\r\n        return <div>\r\n            <div className=\"lmap\" id=\"map\">\r\n\r\n            </div>\r\n            {scale && <Card size=\"small\" className=\"scale\" style={{ width }}>\r\n                <Row >\r\n                    <Col>\r\n                        <Row>\r\n                            <Col>比例尺</Col>\r\n                            <Col>1:{scale}</Col>\r\n                        </Row>\r\n                    </Col>\r\n                    {lnglat?.lng && <Col style={{ paddingLeft: 10 }}>经度：{lnglat.lng}</Col>}\r\n                    {lnglat?.lat && <Col style={{ paddingLeft: 10 }}>纬度：{lnglat.lat}</Col>}\r\n                </Row></Card>}\r\n\r\n            {/* 图例 */}\r\n            {created && <Card size=\"small\" title={\"图例\"} id=\"legendDiv\" style={{ padding: 10, width: 220 }}></Card>}\r\n            {/* 查询面板 */}\r\n            {created && <Card size=\"small\" title={\"几何图形查询\"} id=\"queryDiv\" style={{ padding: 10, width: 220 }}>\r\n                <Row style={{ width: \"100%\" }} >\r\n                    <Button\r\n                        style={{ marginLeft: 10 }}\r\n                        type=\"primary\"\r\n                        // className=\"esri-widget--button esri-icon-map-pin geometry-button\"\r\n                        id=\"point-geometry-button\"\r\n                        value=\"point\"\r\n                        title=\"按点选择\"\r\n                        onClick={this.geometryButtonsClickHandler.bind(this, \"point\")}\r\n                    >\r\n                        点\r\n                    </Button>\r\n                    <Button\r\n                        style={{ marginLeft: 10 }}\r\n                        type=\"primary\"\r\n                        // className=\"esri-widget--button esri-icon-polyline geometry-button\"\r\n                        id=\"line-geometry-button\"\r\n                        value=\"polyline\"\r\n                        title=\"按折线选择\"\r\n                        onClick={this.geometryButtonsClickHandler.bind(this, \"polyline\")}\r\n                    >\r\n                        线\r\n                    </Button>\r\n                    <Button\r\n                        style={{ marginLeft: 10 }}\r\n                        type=\"primary\"\r\n                        // className=\"esri-widget--button esri-icon-polygon geometry-button\"\r\n                        id=\"polygon-geometry-button\"\r\n                        value=\"polygon\"\r\n                        title=\"按多边形选择\"\r\n                        onClick={this.geometryButtonsClickHandler.bind(this, \"polygon\")}\r\n                    >\r\n                        面\r\n                    </Button>\r\n                </Row>\r\n                <Row style={{ width: \"100%\" }}>\r\n                    <div style={{ padding: \"10px 0\" }}>设置缓冲区半径(km):</div>\r\n                    <Slider value={bufferSize} style={{ width: \"100%\" }} min={0} max={500} onChange={this.onSliderChange.bind(this)}></Slider>\r\n                </Row>\r\n                <Row justify={\"center\"} style={{ width: \"100%\" }}>\r\n                    <Button id=\"clearGeometry\" danger type=\"dashed\" onClick={this.clearHandler.bind(this)}>\r\n                        清除\r\n                    </Button>\r\n                </Row>\r\n            </Card>}\r\n\r\n            <Row justify={\"center\"} style={{ position: \"absolute\", left: 300, top: 15, right: 300 }}>\r\n                <Card >\r\n                    <div style={{ fontSize: 24 }}>\r\n                        山东省人口查询展示系统\r\n                    </div>\r\n                </Card>\r\n            </Row>\r\n\r\n            <Row style={{ width, position: \"absolute\", left: 10, top: 210, bottom: 90 }}>\r\n                <Card title={\"统计数据展示\"} style={{ width: \"100%\", height: \"100%\", position: \"relative\" }} bodyStyle={{ width: \"100%\", height: `calc(100% - 40px)`, padding: 10 }} size=\"small\">\r\n                    <Row justify={\"center\"} style={{ height, width: \"100%\" }}>\r\n                        {popuDatas && popuDatas.length > 0 && <Row align={\"middle\"}>\r\n                            <Col>{`总计${popuDatas ? popuDatas.length : 0}个要素`}</Col>\r\n                            <Col>\r\n                                <Button type=\"link\" size=\"small\" onClick={this.onView.bind(this)}>查看数据信息</Button>\r\n                            </Col>\r\n                        </Row>}\r\n                    </Row>\r\n                    <Row style={{ height: `calc(100% - ${height}px)` }}>\r\n                        <Spin style={{ left: \"40%\", position: \"absolute\", top: \"45%\" }} spinning={loading} tip={\"加载数据中....\"}>\r\n\r\n                        </Spin>\r\n                        <Row style={{ height: \"33%\", width: \"100%\" }}>\r\n                            {popuData.datas.length > 0 && <DynamicChart color={\"#f7e2c5\"} yAxisDatas={popuData.names} data={popuData.datas} time={time?.toString()} name={`人口前${count}名数据统计(万人)`} />}\r\n                        </Row>\r\n                        <Row style={{ height: \"33%\", width: \"100%\" }}>\r\n                            {densityData.datas.length > 0 && <DynamicChart color={\"#b5d1d3\"} yAxisDatas={densityData.names} data={densityData.datas} time={time?.toString()} name={`人口密度前${count}名数据统计(万人)`} />}\r\n                        </Row>\r\n                        <Row style={{ height: \"33%\", width: \"100%\" }}>\r\n                            {piePopuDatas && piePopuDatas.length > 0 && <PieChart data={piePopuDatas} time={time?.toString()} name={`人口分级统计区县(个)`} />}\r\n                        </Row>\r\n                    </Row>\r\n                </Card>\r\n            </Row>\r\n            <Modal centered title={\"数据列表\"} footer={null} width={400} open={visible} onCancel={this.onClose.bind(this)}>\r\n                <Table dataSource={dataSource} pagination={false} scroll={{ y: 500 }} columns={columns} />\r\n            </Modal>\r\n        </div>\r\n    };\r\n}\r\n\r\n","import './App.css';\r\nimport { Map } from \"./components/map\"\r\nfunction App() {\r\n  return (\r\n    <Map />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}