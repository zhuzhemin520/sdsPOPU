(this["webpackJsonppopulation-arcgis"]=this["webpackJsonppopulation-arcgis"]||[]).push([[182],{1422:function(e,t,i){"use strict";i.r(t),i.d(t,"default",(function(){return F}));var r=i(0),o=(i(167),i(16)),a=i(2),n=i(23),s=i(44),l=i(1),c=(i(17),i(12),i(51)),u=i(10),d=i(902),h=i(32),p=i(286),y=i(512),b=i(474),O=i(86);let j=class extends p.a{constructor(e){super(e),this.type="csv",this.refresh=Object(n.f)((async e=>{await this.load();const{extent:t,timeExtent:i}=await this._connection.invoke("refresh",e);return this.sourceJSON.extent=t,i&&(this.sourceJSON.timeInfo.timeExtent=[i.start,i.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}}))}load(e){const t=Object(a.l)(e)?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){var e;null!=(e=this._connection)&&e.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);const i=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return b.default.fromJSON(i)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke("queryFeatures",e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);const i=await this._connection.invoke("queryExtent",e?e.toJSON():null,t);return{count:i.count,extent:O.a.fromJSON(i.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke("querySnapping",e,t)}async _startWorker(e){this._connection=await Object(y.b)("CSVSourceWorker",{strategy:Object(h.a)("feature-layers-workers")?"dedicated":"local",signal:e});const{url:t,delimiter:i,fields:r,latitudeField:o,longitudeField:a,spatialReference:n,timeInfo:s}=this.loadOptions,l=await this._connection.invoke("load",{url:t,customParameters:this.customParameters,parsingOptions:{delimiter:i,fields:null==r?void 0:r.map((e=>e.toJSON())),latitudeField:o,longitudeField:a,spatialReference:null==n?void 0:n.toJSON(),timeInfo:null==s?void 0:s.toJSON()}},{signal:e});this.locationInfo=l.locationInfo,this.sourceJSON=l.layerDefinition,this.delimiter=l.delimiter}};Object(r.a)([Object(l.b)()],j.prototype,"type",void 0),Object(r.a)([Object(l.b)()],j.prototype,"loadOptions",void 0),Object(r.a)([Object(l.b)()],j.prototype,"customParameters",void 0),Object(r.a)([Object(l.b)()],j.prototype,"locationInfo",void 0),Object(r.a)([Object(l.b)()],j.prototype,"sourceJSON",void 0),Object(r.a)([Object(l.b)()],j.prototype,"delimiter",void 0),j=Object(r.a)([Object(u.a)("esri.layers.graphics.sources.CSVSource")],j);var f=i(913),m=i(249),g=i(199),v=i(57);function w(e,t){throw new o.a(t,`CSVLayer (title: ${e.title}, id: ${e.id}) cannot be saved to a portal item`)}let S=class extends d.default{constructor(...e){super(...e),this.geometryType="point",this.capabilities=Object(f.a)(!1,!1),this.delimiter=null,this.editingEnabled=!1,this.fields=null,this.latitudeField=null,this.locationType="coordinates",this.longitudeField=null,this.operationalLayerType="CSV",this.outFields=["*"],this.path=null,this.spatialReference=v.a.WGS84,this.source=null,this.type="csv"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=Object(a.l)(e)?e.signal:null,i=this.loadFromPortal({supportedTypes:["CSV"],supportsData:!1},e).catch(n.p).then((async()=>this.initLayerProperties(await this.createGraphicsSource(t))));return this.addResolvingPromise(i),Promise.resolve(this)}get isTable(){return this.loaded&&null==this.geometryType}readWebMapLabelsVisible(e,t){return null!=t.showLabels?t.showLabels:!!(t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.labelingInfo)}set url(e){if(!e)return void this._set("url",e);const t=Object(s.N)(e);this._set("url",t.path),t.query&&(this.customParameters={...this.customParameters,...t.query})}async createGraphicsSource(e){const t=new j({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField,longitudeField:this.longitudeField,spatialReference:this.spatialReference,timeInfo:this.timeInfo,url:this.url},customParameters:this.customParameters});return this._set("source",t),await t.load({signal:e}),this.read({locationInfo:t.locationInfo,columnDelimiter:t.delimiter},{origin:"service",url:this.parsedUrl}),t}queryFeatures(e,t){return this.load().then((()=>this.source.queryFeatures(m.a.from(e)||this.createQuery()))).then((e=>{if(null!=e&&e.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this.load().then((()=>this.source.queryObjectIds(m.a.from(e)||this.createQuery())))}queryFeatureCount(e,t){return this.load().then((()=>this.source.queryFeatureCount(m.a.from(e)||this.createQuery())))}queryExtent(e,t){return this.load().then((()=>this.source.queryExtent(m.a.from(e)||this.createQuery())))}read(e,t){super.read(e,t),t&&"service"===t.origin&&this.revert(["latitudeField","longitudeField"],"service")}write(e,t){return super.write(e,{...t,writeLayerSchema:!0})}clone(){throw new o.a("csv-layer:clone",`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`)}async save(e){return w(this,"csv-layer:save")}async saveAs(e,t){return w(this,"csv-layer:save-as")}async hasDataChanged(){try{const{dataChanged:e,updates:t}=await this.source.refresh(this.customParameters);return Object(a.l)(t)&&this.read(t,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}_verifyFields(){}_verifySource(){}_hasMemorySource(){return!1}};Object(r.a)([Object(l.b)({readOnly:!0,json:{read:!1,write:!1}})],S.prototype,"capabilities",void 0),Object(r.a)([Object(l.b)({type:[","," ",";","|","\t"],json:{read:{source:"columnDelimiter"},write:{target:"columnDelimiter",ignoreOrigin:!0}}})],S.prototype,"delimiter",void 0),Object(r.a)([Object(l.b)({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],S.prototype,"editingEnabled",void 0),Object(r.a)([Object(l.b)({json:{read:{source:"layerDefinition.fields"},write:{target:"layerDefinition.fields"}}})],S.prototype,"fields",void 0),Object(r.a)([Object(l.b)({type:Boolean,readOnly:!0})],S.prototype,"isTable",null),Object(r.a)([Object(c.a)("web-map","labelsVisible",["layerDefinition.drawingInfo.labelingInfo","showLabels"])],S.prototype,"readWebMapLabelsVisible",null),Object(r.a)([Object(l.b)({type:String,json:{read:{source:"locationInfo.latitudeFieldName"},write:{target:"locationInfo.latitudeFieldName",ignoreOrigin:!0}}})],S.prototype,"latitudeField",void 0),Object(r.a)([Object(l.b)({type:["show","hide"]})],S.prototype,"listMode",void 0),Object(r.a)([Object(l.b)({type:["coordinates"],json:{read:{source:"locationInfo.locationType"},write:{target:"locationInfo.locationType",ignoreOrigin:!0,isRequired:!0}}})],S.prototype,"locationType",void 0),Object(r.a)([Object(l.b)({type:String,json:{read:{source:"locationInfo.longitudeFieldName"},write:{target:"locationInfo.longitudeFieldName",ignoreOrigin:!0}}})],S.prototype,"longitudeField",void 0),Object(r.a)([Object(l.b)({type:["CSV"]})],S.prototype,"operationalLayerType",void 0),Object(r.a)([Object(l.b)()],S.prototype,"outFields",void 0),Object(r.a)([Object(l.b)({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],S.prototype,"path",void 0),Object(r.a)([Object(l.b)({json:{read:!1},cast:null,type:j,readOnly:!0})],S.prototype,"source",void 0),Object(r.a)([Object(l.b)({json:{read:!1},value:"csv",readOnly:!0})],S.prototype,"type",void 0),Object(r.a)([Object(l.b)({json:{read:g.g,write:{isRequired:!0,ignoreOrigin:!0,writer:g.i}}})],S.prototype,"url",null),S=Object(r.a)([Object(u.a)("esri.layers.CSVLayer")],S);const F=S}}]);
//# sourceMappingURL=182.382f12dd.chunk.js.map